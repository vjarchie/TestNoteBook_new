//DP

variables : i for prices[i]

dp(i) - profit one can have till index i
cash = max(cash,hold+prices[i]-fee);
hold = max(cash,cash-prices[i]);




// color house 3 :

dp[i][j][k] = minimum cost for k neighbourhood in 0..i , and painted with color j :

house[i] == 0

 if same : dp[i-1][j][k]
 if not : dp[i-1][1..n][k-1]

 house[i] != 0
    if same : dp[i-1][j][k]
    if not : dp[i-1][house[i]][k-1]

base :
    i==m k != target ? -1:0;
    if k>target return -1
    i==



class Solution {
    int m,n,target;
    int[] houses;
    int[][] cost;
    int[][][] dp;

    public int minCost(int[] houses, int[][] cost, int m, int n, int target) {
        this.m = m;
        this.n = n;
        this.target = target;
        this.cost= cost;
        this.houses = houses;
        this.dp = new int[m][n+1][target+1];
        return recursiveUtil(0,0,0);
    }

    private int recursiveUtil(int i,int clr,int nhd){
        if(i==m){
            return nhd==target?0:-1;
        }
        if(nhd >target)
            return -1;
        if(dp[i][clr][nhd] != 0) return dp[i][clr][nhd];
        int min = Integer.MAX_VALUE;
        if(houses[i] == 0){
            int mincost ;
            for(int c = 1;c<=n;c++){
                mincost = (c==clr)?recursiveUtil(i+1,c,nhd):recursiveUtil(i+1,c,nhd+1);
                min = Math.min(min,cost[i][c-1]+mincost);
            }

        }else{
            if(houses[i] == clr){
                min = recursiveUtil(i+1,houses[i],nhd);
            }else{
                min = recursiveUtil(i+1,houses[i],nhd+1);
            }

        }

        dp[i][clr][nhd] = min == Integer.MAX_VALUE? -1:min;
        return dp[i][clr][nhd];

    }
}


0 1 2 3 4
a e i o u

0 - 1
1 - 0,2
2 - 0,1,3,4
3 - 2,4
4 - 0








