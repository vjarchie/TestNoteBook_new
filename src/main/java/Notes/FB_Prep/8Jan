//quick union

Class QuickUnion{

    int[] arr;
    public QuickUnion(int x){
        this.arr = new int[x];
        for(int i=0;i<x;i++)
        {
            this.arr[i] = i;
        }
    }

    public void union(int x,int y){
        int rootX = arr[x];
        int rootY = arr[y];
        if(rootX != rootY){
            root[y] = rootX;
        }
    }

    public int find(int x){
        if(x== arr[x])
            return x;
         return find(arr[x]);
    }
}

// optimal UnionFind


class OptimalUnionFind{

    int[] root;
    int[] rank;

    public OptimalUnionFind(int size){
        root = new int[size];
        rank = new int[rank];
        for(int i=0;<size;i++){
            root[i] = i;
            rank[i] = 1;
        }
    }

    public void union(int x,int y){
        int rootX = find(x);
        int rootY = find(y);
        if(rootX != rootY){
            if(rank[rootX]<rank[rankY]){
                root[rootY] = rootX;
            }
            else if(rank[rootY] > rank[rootX]){
                root[rootY] = rootY;
            }else{
                root[rootY] = root[rootX];
                rank[rootX] +=1;
            }

        }
    }

    public boolean isConnected(int x,int y){
        return find(x) == find(y);
    }

    public int find(int x){
        if(root[x] == x){
            return x;
        }
        return x=find(root[x]);
    }
}

