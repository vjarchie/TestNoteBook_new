public int maximalSquare(int[][] input){
    int row = input.length;
    int col = input[0].length;
    int[][] dp = new int[row+1][col+1];
    int max = 0;
    for(int i=1;i<row;i++){
        for(int j=1;j<col;j++{
            if(input[i][j] == 1){
                dp[i][j] = 1+ Math.min(Math.min(dp[i-1][j],dp[i-1][j-1]),dp[i][j-1]);
                max = Math.max(max,dp[i][j];
            }
        }
    }

    return max;

}
complexity : O(nm)
-----------------------------

int[] jobDiffuclty - i lenght - n
d- no. of days d

dp(i,day) = minimum difficulty starting on  ith job  and day  days

        = min(hardest + dp[j+1][day+1])  for i<= j<n-(d-day)
         and hardest = max(jobDifficulty[k]) i<=k<=j

int[] jobDifficult;
int[][] memo;
int[] maxDiff;
int n,d;

public int minDifficulty(int[] jobDifficulty,int d){
    this.jobDifficulty = jobDifficulty;
    this.d= d;
    this.n = jobDifficulty.length;
    if(n<d)
        return -1;
    maxDiff = new int[n];
    maxDiff[n-1] = jobDifficulty[n-1];
    for(int i=n-2;i>=0;i--){
        maxDiff[i] = Math.max(jobDifficulty[i],maxDiff[i+1]);
    }
    memo = new int[n][d+1];
    for(int i=0;i<n;i++){
        Arrays.fill(memo[i],-1);
    }

    return dp(0,1);


}

public int dp(int i,int days){
    int n = jobDifficulty.length;
    if(days == d){
        return maxDiff[i];
    }

    if(memo[i][days] == -1){
        int best = Integer.MAX_VALUE;
        int hardest = 0;
        for(int j=i;j<n-(d-day);j++){
            hardest = Math.max(hardest,jobDifficult[j]);
            best = Math.min(best,hardest + dp(j+1,days+1));
        }

        memo[i][days] = best;

    }

    return memo[i][days];
}


---------------------------------------------------------------

coin change :
coins[]
dp[i] - minimum coins to sum to i
    = 1 + min (dp[i-j]) where j -> 0 to coins.length;
 return dp[target]

 public int minimumCoins(int[] coins,int target){
    int n = coins.length;
    int[] dp = new int[target+1];
    dp[0] = 0;
    Arrays.fill(dp,target+1);
    for(int i=1;i<=target;i++){
        for(int j=0;j<n;j++){
            if(i>=coins[j]){
                dp[i] = Math.min(dp[i],1+dp[i-coins[j]);
            }
        }
    }
    return dp[target] >target?-1:dp[target];
 }
--------------------------------------

input - int[]
dp[i] = longest substring terminating at i
dp[0] = 1
return dp[n-1];

recurrence : dp[i] = max(dp[i],1+ dp[j]) {j : 0<=j<i && input[j] <= input[i]


// binary search to find no. greater than
public int binarySearch(List<Integer> sub,int num){
    int left = 0;
    int right = sub.size()-1;
    int mid = left + (right-left)/2;
    while(left<right){
        mid = (left + right)/2;
        if(sub.get(mid) == num){
            return mid;
        }
        if(sub.get(mid)<num){
            left = mid+1;
        }
        else{
            right = mid+1;
        }
    }
    return left;

-----------------------------------------

buy and sell stock IV

input : int[] input, k - maximum transactions - buy and sell  = 1 transaction
return dp(0,k,0);
dp(i,j,t)  = with 1 stock :
dp(i,j,1) - max(input[i] + dp(i+1,j-1,0),dp(i+1,j,1))
dp(i,j,0) - max(-input[i] + dp(i+1,j,1),dp(i+1,j,0))


public int maxProfit(int k,int[] prices){
    this.prices = prices;
    this.dp = new int[prices.length][k+1][2];
    return recurUtil(0,k,0);
}

public int recurUtil(int i,int trns,int holding){

    if(trns == 0 || i==prices.length){
        return 0;
    }

    if(dp[i][trns][k] == 0){
        int doNoting = recurUtil(i+1,trns,holding);
        int doSomething ;
        if(holding == 1){
            doSometing = prices[i] + dp(i+1,trns-1,0);
        }else{
            doSomething = -prices[i] + dp(i+1,trns,1);
        }
        dp[i][trns][k] = Math.max(doNothing.doSomething);
    }

    return dp[i][trns][k];

}




}


////

360/60 - 6












