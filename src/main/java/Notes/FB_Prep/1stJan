// Best time to buy/sell stock IV

dp(i,transactionsRemaining,holding) - maximum profit achievable starting on day i with transactionsRemaining and state holding/non-holding
return dp(0,k,0) - 0th day, k transactions, no stock holding

recurrence :

dp(i,transactionsRemaining,holding ) =
    if(holding ==1 ){
        max(dp(i+1,transactionsRemaining,holding),prices[i]+dp(i+1,transactionsRemaining-1,0);
    }else {
        max(dp(i+1,transactionsRemaining,holding,-prices[i]+dp(i+1,transactionsRemaining,1);
    }

base :
    if(transactionsRemaining == 0 || i==prices.length) return 0;

//buy and sell stock with cooldown

dp(i,holding) - return dp(0,0);

recurrence :
 dp(i,holding) =
  if(holding == 1){
    max(dp(i+1,holding),prices[i]+dp(i+2,0))
  }
  else {
    max(dp(i+1,holding),-prices[i]+dp(i+2,1));

  }


https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/75924/Most-consistent-ways-of-dealing-with-the-series-of-stock-problems


// counting dp

paint posts :

state : dp[i] - no. of ways to paint post i
    k - number of colors.

recursion :
        dp[i] = if different - (k-1)*dp[i-1];
                if same as i-1th- 1*dp[i-1]
                if different from i-1,i-2 : 1*(k-1)*dp[i-2]
           (k-1)[dpi-1]+(k-1)dp[i-2] = (k-1)(dp[i-1]+dp[i-2]


base :
        dp[1] = k
        dp[2] = k*k


public int totalWaysPaint(int n,int k){
    if(n==1) return k;
    if(n==2) return k*k;
   int[] dp = new int[n+1];
   dp[1]=k;
   dp[2]=k*k;
   for(int i=3;i<=n;i++){
    dp[i] = (k-1)*(dp[i-2]+dp[i-1]);
   }
   return dp[n];
}


// coin changes - no. of ways

dp[i] = no of ways to form amount i;

recurrence :

    dp[i] = sum ( dp[i-k] ) where 0<k<p

    base : dp[0] = 0;